const express = require('express');
const router = express.Router();
const Transaction = require('../models/Transaction');
const Book = require('../models/Book');
const User = require('../models/User');


// Get all transactions
router.get('/', async (req, res) => {
    try {
        const transactions = await Transaction.find()
            .populate('bookId')  // Populate book information
            .populate('userId'); // Populate user information

        const response = transactions.map(tx => ({
            _id: tx._id,
            bookName: tx.bookId.name,
            userName: tx.userId.name,
            issueDate: tx.issueDate,
            returnDate: tx.returnDate || null
        }));

        res.json(response);
    } catch (error) {
        res.status(500).json({ message: 'Error fetching transactions', error });
    }
});

// Issue a book
router.post('/issue', async (req, res) => {
    const { bookName, userId, issueDate } = req.body;
    const book = await Book.findOne({ name: bookName });
    if(!book._id) return res.status(404).json({message:"no book founded"})
    const transaction = new Transaction({
        userId,
        bookId: book._id,
        issueDate,
    });
    await transaction.save();
    res.json({ message: 'Book issued' });
});

// Return a book and calculate rent
router.post('/return', async (req, res) => {
    const { bookName, userId, returnDate } = req.body;
    const book = await Book.findOne({ name: bookName }); 
    if(!book._id) return res.status(404).json({message:"no book founded"})
    const transaction = await Transaction.findOne({ userId, bookId: book._id, returnDate: null });

    const rentDays = (new Date(returnDate) - new Date(transaction.issueDate)) / (1000 * 60 * 60 * 24);
    const totalRent = rentDays * book.rentPerDay;

    transaction.returnDate = returnDate;
    transaction.rent = totalRent;
    await transaction.save();

    res.json({ totalRent });
});

// Get total rent generated by a book
router.get('/rent/:bookName', async (req, res) => {
    const book = await Book.findOne({ name: req.params.bookName });
    const transactions = await Transaction.find({ bookId: book._id });
    if(!transactions._id) return res.status(404).json({message:"no book founded"})
    const totalRent = transactions.reduce((acc, tx) => acc + tx.rent, 0);
    res.json({ totalRent });
});

// List people who issued a book and current holder
router.get('/status/:bookName', async (req, res) => {
    const book = await Book.findOne({ name: req.params.bookName });
    const transactions = await Transaction.find({ bookId: book._id }).populate('userId');

    const issuedCount = transactions.length;
    const currentHolder = transactions.find(tx => !tx.returnDate)?.userId || 'Not issued';

    res.json({ issuedCount, currentHolder });
});

// List books issued to a person
router.get('/user/:userId', async (req, res) => {
    const transactions = await Transaction.find({ userId: req.params.userId }).populate('bookId');
    const books = transactions.map(tx => tx.bookId.name);
    res.json(books);
});

// List books issued in a date range
router.get('/date-range', async (req, res) => {
    const { startDate, endDate } = req.query;
    const transactions = await Transaction.find({
        issueDate: { $gte: new Date(startDate), $lte: new Date(endDate) }
    }).populate('bookId userId');

    const result = transactions.map(tx => ({
        book: tx.bookId.name,
        user: tx.userId.name
    }));

    res.json(result);
});

module.exports = router;
